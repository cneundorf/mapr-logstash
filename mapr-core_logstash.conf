input {

file {
      type => "mapr-warden"
      exclude => ["*.gz","*.zip","*.tgz"]
##     path => [ "/opt/mapr/logs/cldb.log", "/opt/mapr/logs/warden.log*", "/opt/mapr/logs/mfs-*.log" ]
      path => [ "/opt/mapr/logs/warden.log*" ]
      sincedb_path => "/dev/null"
      start_position => "beginning" ## should replace with end
     }

file {
     type => "mapr-cldb"
      exclude => ["*.gz","*.zip","*.tgz"]
#     path => [ "/opt/mapr/logs/cldb.log", "/opt/mapr/logs/warden.log*", "/opt/mapr/logs/mfs-*.log" ]
      path => [ "/opt/mapr/logs/cldb.log" ]
#      sincedb_path => "/tmp/sinced"
     sincedb_path => "/dev/null"
      start_position => "beginning" ## should replace with end
      }

file {
     type => "mapr-mfs"
      exclude => ["*.gz","*.zip","*.tgz"]
      path => [ "/opt/mapr/logs/mfs.log-*" ]
#      sincedb_path => "/tmp/sinced"
     sincedb_path => "/dev/null"
      start_position => "beginning" ## should replace with end
      }

file {
     type => "mapr-hoststats"
      exclude => ["*.gz","*.zip","*.tgz"]
      path => [ "/opt/mapr/logs/hoststats.*" ]
#      sincedb_path => "/tmp/sinced"
     sincedb_path => "/dev/null"
      start_position => "beginning" ## should replace with end
      }



file {
      type => "mapr-adminuiapp"
      exclude => ["*.gz","*.zip","*.tgz"]
      path => [ "/opt/mapr/logs/adminuiapp.log*" ]
#      sincedb_path => "/tmp/sinced"
      sincedb_path => "/dev/null"
      start_position => "beginning" ## should replace with end
      }



file {
      type => "mapr-localmount"
      exclude => ["*.gz","*.zip","*.tgz"]
      path => [ "/opt/mapr/logs/mount_local_fs.log" ]
#      sincedb_path => "/tmp/sinced"
      sincedb_path => "/dev/null"
      start_position => "beginning" ## should replace with end
      }



file {
      type => "mapr-nfsserver"
      exclude => ["*.gz","*.zip","*.tgz"]
      path => [ "/opt/mapr/logs/nfsserver.log" ]
#      sincedb_path => "/tmp/sinced"
      sincedb_path => "/dev/null"
      start_position => "beginning" ## should replace with end
      }

file {
      type => "mapr-nfsmon"
      exclude => ["*.gz","*.zip","*.tgz"]
      path => [ "/opt/mapr/logs/nfsmon.log" ]
#      sincedb_path => "/tmp/sinced"
      sincedb_path => "/dev/null"
      start_position => "beginning" ## should replace with end
      }

file {
      type => "mapr-systemvolumes"
      exclude => ["*.gz","*.zip","*.tgz"]
      path => [ "/opt/mapr/logs/createsystemvolumes.log" ]
#      sincedb_path => "/tmp/sinced"
      sincedb_path => "/dev/null"
      start_position => "beginning" ## should replace with end
      }

}

# Add name=value pairs as fields

filter {
    if [type] == "mapr-warden" {
    grok {
      match => { "message" => "%{MAPR_DATE:datetime} %{LOGLEVEL:loglevel}  %{MAPR_JAVA:component_class} %{MAPR_PROG:prog} %{GREEDYDATA:sysmessage}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    date
    { match => [ "datetime", "yyyy-MM-dd HH:mm:ss,SSS" ] }
   }
 }

filter {
    if [type] == "mapr-cldb" {
    grok {
      match => { "message" => "%{MAPR_DATE:datetime} %{LOGLEVEL:loglevel} %{WORD:component_class} %{MAPR_PROG:prog} %{GREEDYDATA:sysmessage}" }
      #match => { "message" => "%{MAPR_DATE:timestamp} %{LOGLEVEL:loglevel}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    date
    { match => [ "datetime", "yyyy-MM-dd HH:mm:ss,SSS" ] }
   }
 }

filter {
    if [type] == "mapr-mfs" {
    grok {
      match => { "message" => "%{MAPR_DATE:datetime} %{LOGLEVEL:loglevel} %{GREEDYDATA:sysmessage}" }
      #match => { "message" => "%{MAPR_DATE:timestamp} %{LOGLEVEL:loglevel}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    date
    { match => [ "datetime", "yyyy-MM-dd HH:mm:ss,SSS" ] }
   }
 }

filter {
    if [type] == "mapr-hoststats" {
    grok {
      match => { "message" => "%{MAPR_DATE:datetime} %{LOGLEVEL:loglevel} %{WORD:component_class} %{GREEDYDATA:sysmessage}" }
      #match => { "message" => "%{MAPR_DATE:timestamp} %{LOGLEVEL:loglevel}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    date
    { match => [ "datetime", "yyyy-MM-dd HH:mm:ss,SSS" ] }
   }
 }

filter {
    if [type] == "mapr-adminuiapp" {
    grok {
      #match => { "message" => "%{MAPR_DATE:timestamp} %{LOGLEVEL:loglevel} %{MAPR_JAVA:component_class} %{MAPR_PROG:prog} %{GREEDYDATA:sysmessage}" }
      match => { "message" => "%{MAPR_DATE:datetime} %{LOGLEVEL:loglevel} %{GREEDYDATA:sysmessage}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    date
    { match => [ "datetime", "yyyy-MM-dd HH:mm:ss,SSS" ] }
   }
 }

filter {
    if [type] == "mapr-localmount" {
    grok {
      match => { "message" => "%{MAPR_DATE:datetime} %{LOGLEVEL:loglevel} %{GREEDYDATA:sysmessage}" }
      #match => { "message" => "%{MAPR_DATE:timestamp} %{LOGLEVEL:loglevel}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    date
    { match => [ "datetime", "yyyy-MM-dd HH:mm:ss,SSS" ] }
   }
 }

filter {
    if [type] == "mapr-nfsserver" {
    grok {
      match => { "message" => "%{MAPR_DATE:datetime} %{LOGLEVEL:loglevel} %{GREEDYDATA:sysmessage}" }
      #match => { "message" => "%{MAPR_DATE:timestamp} %{LOGLEVEL:loglevel}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    date
    { match => [ "datetime", "yyyy-MM-dd HH:mm:ss,SSS" ] }
   }
 }

filter {
    if [type] == "mapr-nfsmon" {
    grok {
      match => { "message" => "%{MAPR_DATE:datetime} %{LOGLEVEL:loglevel} %{GREEDYDATA:sysmessage}" }
      #match => { "message" => "%{MAPR_DATE:timestamp} %{LOGLEVEL:loglevel}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    date
    { match => [ "datetime", "yyyy-MM-dd HH:mm:ss,SSS" ] } 
   }
 }
filter {
    if [type] == "mapr-systemvolumes" {
    grok {
      match => { "message" => "%{MAPR_DATE:datetime} %{LOGLEVEL:loglevel} %{GREEDYDATA:sysmessage}" }
      #match => { "message" => "%{MAPR_DATE:timestamp} %{LOGLEVEL:loglevel}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
   date
    { match => [ "datetime", "yyyy-MM-dd HH:mm:ss,SSS" ] }
   }
 }



output {
  elasticsearch {
    host => localhost
  }
  stdout { codec => rubydebug }
}
